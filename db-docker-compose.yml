networks:
  onehubnetwork:
    external: true

services:
#    pgadmin:
#    networks:
#      - onehubnetwork
#      image: dpage/pgadmin4
#      ports:
#        - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
#      environment:
#        PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
#        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#      volumes:
#        - ./.data/pgadmin:/var/lib/pgadmin

  postgres:
    networks:
      - onehubnetwork
    image: arm64v8/postgres:16.3
      # image: postgres:15.3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./.data/pgdata:/var/lib/postgresql/data
        # - ./configs/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
    ports:
      - 54321:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Make sure before you run this you have done the following, In *some* folder:
  # git clone https://github.com/bfritscher/typesense-dashboard.git
  # cd typesense-dashboard
  # docker build -t typesense-dashboard .
  # or
  # docker build --build-arg=PUBLIC_PATH=/typesense -t typesense-dashboard .
  typesense-dashboard:
    networks:
      - onehubnetwork
    image: typesense-dashboard
    volumes:
      - ./configs/tsdash.config:/srv/config.json

  typesense:
    networks:
      - onehubnetwork
        # image: typesense/typesense:0.25.0
    image: typesense/typesense:26.0-arm64
    restart: on-failure
    environment:
      GLOG_minloglevel: 1
    ports:
      - 8108:8108
    volumes:
      - ./.data/typesensedata:/data
    command: '--data-dir /data --api-key=my_api_key --enable-cors'

  otel-collector:
    networks:
      - onehubnetwork
    image: otel/opentelemetry-collector-contrib:0.105.0
    command: ["--config=/etc/otel-collector.yaml"]
    volumes:
      - ./configs/otel-collector.yaml:/etc/otel-collector.yaml
        # - ./configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#    ports:
#      - 13133:13133 # health_check extension
#      - 4317:4317 # OTLP gRPC receiver
#      - 4318:4318 # OTLP http receiver

  prometheus:
    networks:
      - onehubnetwork
    image: prom/prometheus:v2.53.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/prometheus/'
    volumes:
      - ./configs/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  jaeger:
    networks:
      - onehubnetwork
    image: jaegertracing/all-in-one:1.59
    container_name: jaeger
    environment:
      QUERY_BASE_PATH: '/jaeger'
      COLLECTOR_OTLP_GRPC_HOST_PORT: '0.0.0.0:4317'
      COLLECTOR_OTLP_HTTP_HOST_PORT: '0.0.0.0:4318'
      COLLECTOR_ZIPKIN_HOST_PORT: ':9411'
      COLLECTOR_OTLP_ENABLED: true
#    ports: # Some ports are optional or deprecated, but we still let them be here as it's a general snippet
#      - "4317:4317" # OTLP collector grpc
#      - "4318:4318" # OTLP collector http
#      - "5775:5775/udp" # agent accept zipkin.thrift over compact thrift protocol (deprecated, used by legacy clients only)
#      - "6831:6831/udp" # agent accept jaeger.thrift over compact thrift protocol
#      - "6832:6832/udp" # agent accept jaeger.thrift over binary thrift protocol
#      - "5778:5778" # agent serve configs
#      - "16686:16686" # query serve frontend (Jaeger UI)
#      - "14268:14268" # collector accept jaeger.thrift directly from clients
#      - "14250:14250" # collector accept model.proto
#      - "9411:9411" # collector Zipkin compatible endpoint (optional)
