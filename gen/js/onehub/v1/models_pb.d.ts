// @generated by protoc-gen-es v1.10.0
// @generated from file onehub/v1/models.proto (package onehub.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct, Timestamp } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message onehub.v1.User
 */
export declare class User extends Message$1<User> {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * ID of this user
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * Name of this user
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * An avatar object for the user
   *
   * @generated from field: string avatar = 5;
   */
  avatar: string;

  /**
   * General Profile Data
   *
   * @generated from field: optional google.protobuf.Struct profile_data = 6;
   */
  profileData?: Struct;

  constructor(data?: PartialMessage<User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User;

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean;
}

/**
 * @generated from message onehub.v1.MessageBase
 */
export declare class MessageBase extends Message$1<MessageBase> {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 2;
   */
  updatedAt?: Timestamp;

  /**
   * ID of the topic
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * ID of the user that created this topic
   *
   * @generated from field: string creator_id = 4;
   */
  creatorId: string;

  constructor(data?: PartialMessage<MessageBase>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.MessageBase";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageBase;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageBase;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageBase;

  static equals(a: MessageBase | PlainMessage<MessageBase> | undefined, b: MessageBase | PlainMessage<MessageBase> | undefined): boolean;
}

/**
 * Artists perform/play/sing songs
 *
 * @generated from message onehub.v1.Topic
 */
export declare class Topic extends Message$1<Topic> {
  /**
   * @generated from field: onehub.v1.MessageBase base = 1;
   */
  base?: MessageBase;

  /**
   * A unique name of the topic that users can use to connect to
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * IDs of users in this topic.   Right now no information about
   * their participation is kept.
   *
   * @generated from field: map<string, bool> users = 3;
   */
  users: { [key: string]: boolean };

  constructor(data?: PartialMessage<Topic>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.Topic";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Topic;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Topic;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Topic;

  static equals(a: Topic | PlainMessage<Topic> | undefined, b: Topic | PlainMessage<Topic> | undefined): boolean;
}

/**
 * *
 * Base message type of entities that have custom "content" in them.
 *
 * @generated from message onehub.v1.ContentBase
 */
export declare class ContentBase extends Message$1<ContentBase> {
  /**
   * *
   * Content type of the message. Can be like a ContentType http
   * header or something custom like shell/command
   *
   * @generated from field: string content_type = 1;
   */
  contentType: string;

  /**
   * *
   * A simple way to just send text.
   *
   * @generated from field: string content_text = 2;
   */
  contentText: string;

  /**
   * Raw contents for data stored locally as JSON
   * Note we can have a combination of text, url and data
   * to show different things in the View/UI
   *
   * @generated from field: google.protobuf.Struct content_data = 3;
   */
  contentData?: Struct;

  constructor(data?: PartialMessage<ContentBase>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.ContentBase";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentBase;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentBase;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentBase;

  static equals(a: ContentBase | PlainMessage<ContentBase> | undefined, b: ContentBase | PlainMessage<ContentBase> | undefined): boolean;
}

/**
 * *
 * An individual message in a topic
 *
 * @generated from message onehub.v1.Message
 */
export declare class Message extends Message$1<Message> {
  /**
   * @generated from field: onehub.v1.MessageBase base = 1;
   */
  base?: MessageBase;

  /**
   * @generated from field: onehub.v1.ContentBase content_base = 2;
   */
  contentBase?: ContentBase;

  /**
   * *
   * Topic the message is part of.  This is only set by the server
   * and cannot be modified.
   *
   * @generated from field: string topic_id = 3;
   */
  topicId: string;

  /**
   * *
   * ID of the parent message for threading a Topic
   *
   * @generated from field: string parent_message_id = 4;
   */
  parentMessageId: string;

  constructor(data?: PartialMessage<Message>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.Message";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message;

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean;
}

/**
 * *
 * Nodes are blocks inside a graph.
 *
 * @generated from message onehub.v1.Node
 */
export declare class Node extends Message$1<Node> {
  /**
   * @generated from field: onehub.v1.MessageBase base = 1;
   */
  base?: MessageBase;

  /**
   * @generated from field: onehub.v1.ContentBase content_base = 2;
   */
  contentBase?: ContentBase;

  /**
   * Others to follow
   *
   * @generated from field: string topic_id = 3;
   */
  topicId: string;

  constructor(data?: PartialMessage<Node>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.Node";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node;

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean;
}

/**
 * *
 * Edges between two nodes in a graph.
 *
 * @generated from message onehub.v1.Edge
 */
export declare class Edge extends Message$1<Edge> {
  /**
   * @generated from field: onehub.v1.MessageBase base = 1;
   */
  base?: MessageBase;

  /**
   * @generated from field: onehub.v1.ContentBase content_base = 2;
   */
  contentBase?: ContentBase;

  /**
   * ID of the source node
   *
   * @generated from field: string source_id = 3;
   */
  sourceId: string;

  /**
   * ID of the destination node
   *
   * @generated from field: string target_id = 4;
   */
  targetId: string;

  /**
   * Whether edge id undirected (edges are directed by default)
   *
   * @generated from field: string undirected = 5;
   */
  undirected: string;

  constructor(data?: PartialMessage<Edge>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.Edge";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge;

  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean;
}

/**
 * *
 * General way to handle pagination in all listing resources.
 *
 * @generated from message onehub.v1.Pagination
 */
export declare class Pagination extends Message$1<Pagination> {
  /**
   * *
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   *
   * @generated from field: string page_key = 1;
   */
  pageKey: string;

  /**
   * *
   * Number of results to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  constructor(data?: PartialMessage<Pagination>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.Pagination";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pagination;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pagination;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pagination;

  static equals(a: Pagination | PlainMessage<Pagination> | undefined, b: Pagination | PlainMessage<Pagination> | undefined): boolean;
}

/**
 * *
 * Standard way to pass pagination related responses, eg the next page key
 * that can be passed on a paginated request to get the "next page" of results.
 *
 * @generated from message onehub.v1.PaginationResponse
 */
export declare class PaginationResponse extends Message$1<PaginationResponse> {
  /**
   * *
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   *
   * @generated from field: string next_page_key = 1;
   */
  nextPageKey: string;

  /**
   * *
   * Whether more results exist.
   *
   * @generated from field: bool has_more_results = 2;
   */
  hasMoreResults: boolean;

  /**
   * *
   * Total number of results in teh collection if pagination did not exist.
   * 0 or -1 if unknown
   *
   * @generated from field: int32 total_num_results = 3;
   */
  totalNumResults: number;

  constructor(data?: PartialMessage<PaginationResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "onehub.v1.PaginationResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaginationResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaginationResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaginationResponse;

  static equals(a: PaginationResponse | PlainMessage<PaginationResponse> | undefined, b: PaginationResponse | PlainMessage<PaginationResponse> | undefined): boolean;
}

