{
  "swagger": "2.0",
  "info": {
    "title": "onehub/v1/models.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MessageService"
    },
    {
      "name": "TopicService"
    },
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/messages/{id}": {
      "get": {
        "summary": "*\nGet a particular message",
        "operationId": "MessageService_GetMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the topic to be fetched",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "MessageService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular message",
        "operationId": "MessageService_DeleteMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the message to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/messages/{message.id}": {
      "patch": {
        "summary": "*\nUpdate a message within a topic.",
        "operationId": "MessageService_UpdateMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "message.id",
            "description": "*\nID of the message guaranteed to be unique within a topic.\nSet only by the server and cannot be modified.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "*\nWhen the message was created on the server."
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "*\nWhen the message or its body were last modified (if modifications are\npossible)."
                    },
                    "userId": {
                      "type": "string",
                      "description": "*\nUser sending this message."
                    },
                    "topicId": {
                      "type": "string",
                      "description": "*\nTopic the message is part of.  This is only set by the server\nand cannot be modified."
                    },
                    "contentType": {
                      "type": "string",
                      "title": "*\nContent type of the message. Can be like a ContentType http\nheader or something custom like shell/command"
                    },
                    "contentText": {
                      "type": "string",
                      "description": "*\nA simple way to just send text."
                    },
                    "contentData": {
                      "type": "object",
                      "title": "Raw contents for data stored locally as JSON\nNote we can have a combination of text, url and data\nto show different things in the View/UI"
                    }
                  },
                  "title": "The message being updated.  The topic ID AND message ID fields *must*\nbe specified in this message object.  How other fields are used is\ndetermined by the update_mask parameter enabling partial updates"
                },
                "updateMask": {
                  "type": "string",
                  "description": "Indicates which fields are being updated\nIf the field_mask is *not* provided then we reject\na replace (as required by the standard convention) to prevent\nfull replace in error.  Instead an update_mask of \"*\" must be passed."
                },
                "appendMask": {
                  "type": "string",
                  "title": "Any fields specified here will be \"appended\" to instead of being\nreplaced"
                }
              }
            }
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/messages:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple messages by IDs",
        "operationId": "MessageService_GetMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMessagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the messages to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/messages:import": {
      "post": {
        "summary": "*\nImport messages in bulk",
        "operationId": "MessageService_ImportMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportMessagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "*\nBulk importing of messages with very minimal checks.\nHere no validation is performed on the messages (ie checking topic IDS)\nsetting current user id, setting created/updated time stamps etc.\n\nUse this either for recovery (typically you should do DR on the DB) or\nor for testing.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportMessagesRequest"
            }
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/topics": {
      "get": {
        "summary": "*\nList all topics from a user.",
        "operationId": "TopicService_ListTopics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTopicsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "TopicService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new sesssion",
        "operationId": "TopicService_CreateTopic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTopicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTopicRequest"
            }
          }
        ],
        "tags": [
          "TopicService"
        ]
      }
    },
    "/v1/topics/{id}": {
      "get": {
        "summary": "*\nGet a particular topic",
        "operationId": "TopicService_GetTopic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTopicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the topic to be fetched",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "TopicService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular topic",
        "operationId": "TopicService_DeleteTopic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteTopicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the topic to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "TopicService"
        ]
      }
    },
    "/v1/topics/{topic.id}": {
      "patch": {
        "summary": "*\nUpdates specific fields of a topic",
        "operationId": "TopicService_UpdateTopic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateTopicResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "topic.id",
            "description": "ID of the topic",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "creatorId": {
                      "type": "string",
                      "title": "ID of the user that created this topic"
                    },
                    "name": {
                      "type": "string",
                      "title": "A unique name of the topic that users can use to connect to"
                    },
                    "users": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      },
                      "description": "IDs of users in this topic.   Right now no information about\ntheir participation is kept."
                    }
                  },
                  "title": "*\nTopic being updated"
                },
                "updateMask": {
                  "type": "string",
                  "description": "*\nMask of fields being updated in this Topic to make partial changes."
                },
                "addUsers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "*\nIDs of users to be added to this topic."
                },
                "removeUsers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "*\nIDs of users to be removed from this topic."
                }
              },
              "description": "*\nThe request for (partially) updating an Topic.",
              "title": "UpdateTopicRequest"
            }
          }
        ],
        "tags": [
          "TopicService"
        ]
      }
    },
    "/v1/topics/{topicId}/messages": {
      "get": {
        "summary": "*\nList all messages in a topic",
        "operationId": "MessageService_ListMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMessagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "topicId",
            "description": "*\nTopic in which messages are to be listed.  Required.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MessageService"
        ]
      },
      "post": {
        "summary": "*\nCreate a single message or messages in batch",
        "operationId": "MessageService_CreateMessages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateMessagesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "topicId",
            "description": "*\nTopic where messages are being created",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1Message"
                  },
                  "title": "*\nMessage being updated"
                },
                "allowUserids": {
                  "type": "boolean",
                  "description": "*\nWhether to allow custom user IDs or whether to\nforce user IDs to be overridden to the logged in user.\nIn batch mode we want the option to have diff user IDs\nIn prod - we want to ensure that only Admins can provide\nthis option."
                }
              },
              "title": "*\nMessage creation request object"
            }
          }
        ],
        "tags": [
          "MessageService"
        ]
      }
    },
    "/v1/topics:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple topics by ID",
        "operationId": "TopicService_GetTopics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTopicsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the topic to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TopicService"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "summary": "*\nList all users from a user.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageKey",
            "description": "*\nInstead of an offset an abstract  \"page\" key is provided that offers\nan opaque \"pointer\" into some offset in a result set.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "*\nNumber of results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "*\nCreate a new sesssion",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "*\nGet a particular user",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the user to be fetched",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "*\nDelete a particular user",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nID of the user to be deleted.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{user.id}": {
      "patch": {
        "summary": "*\nUpdates specific fields of a user",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "ID of this user",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "name": {
                      "type": "string",
                      "title": "Name of this user"
                    },
                    "avatar": {
                      "type": "string",
                      "title": "An avatar object for the user"
                    },
                    "profileData": {
                      "type": "object",
                      "title": "General Profile Data"
                    }
                  },
                  "title": "*\nUser being updated"
                },
                "updateMask": {
                  "type": "string",
                  "description": "*\nMask of fields being updated in this User to make partial changes."
                }
              },
              "description": "*\nThe request for (partially) updating an User.",
              "title": "UpdateUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users:batchGet": {
      "get": {
        "summary": "*\nBatch get multiple users by ID",
        "operationId": "UserService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "*\nIDs of the user to be fetched",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1CreateMessagesResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Message"
          },
          "title": "*\nMessage being created"
        }
      },
      "description": "*\nResponse of an message creation."
    },
    "v1CreateTopicRequest": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/v1Topic",
          "title": "*\nTopic being updated"
        }
      },
      "title": "*\nTopic creation request object"
    },
    "v1CreateTopicResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/v1Topic",
          "title": "*\nTopic being created"
        }
      },
      "description": "*\nResponse of an topic creation."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being updated"
        }
      },
      "title": "*\nUser creation request object"
    },
    "v1CreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being created"
        }
      },
      "description": "*\nResponse of an user creation."
    },
    "v1DeleteMessageResponse": {
      "type": "object",
      "title": "*\nMessage deletion response"
    },
    "v1DeleteTopicResponse": {
      "type": "object",
      "title": "*\nTopic deletion response"
    },
    "v1DeleteUserResponse": {
      "type": "object",
      "title": "*\nUser deletion response"
    },
    "v1GetMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/v1Message"
        }
      },
      "title": "*\nMessage get response"
    },
    "v1GetMessagesResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Message"
          }
        }
      },
      "title": "*\nMessage batch-get response"
    },
    "v1GetTopicResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/v1Topic"
        }
      },
      "title": "*\nTopic get response"
    },
    "v1GetTopicsResponse": {
      "type": "object",
      "properties": {
        "topics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Topic"
          }
        }
      },
      "title": "*\nTopic batch-get response"
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      },
      "title": "*\nUser get response"
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1User"
          }
        }
      },
      "title": "*\nUser batch-get response"
    },
    "v1ImportMessagesRequest": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Message"
          },
          "title": "*\nMessage being updated"
        }
      },
      "description": "*\nBulk importing of messages with very minimal checks.\nHere no validation is performed on the messages (ie checking topic IDS)\nsetting current user id, setting created/updated time stamps etc.\n\nUse this either for recovery (typically you should do DR on the DB) or\nor for testing."
    },
    "v1ImportMessagesResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Message"
          },
          "title": "*\nMessage being created"
        }
      },
      "description": "*\nResponse of an message import."
    },
    "v1ListMessagesResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Message"
          },
          "description": "*\nThe list of topics found as part of this response."
        },
        "nextPageKey": {
          "type": "string",
          "description": "*\nThe key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        }
      },
      "description": "*\nResponse of a topic search/listing."
    },
    "v1ListTopicsResponse": {
      "type": "object",
      "properties": {
        "topics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Topic"
          },
          "description": "*\nThe list of topics found as part of this response."
        },
        "nextPageKey": {
          "type": "string",
          "description": "*\nThe key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        }
      },
      "description": "*\nResponse of a topic search/listing."
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          },
          "description": "*\nThe list of users found as part of this response."
        },
        "nextPageKey": {
          "type": "string",
          "description": "*\nThe key/pointer string that subsequent List requests should pass to\ncontinue the pagination."
        }
      },
      "description": "*\nResponse of a user search/listing."
    },
    "v1Message": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "*\nWhen the message was created on the server."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "*\nWhen the message or its body were last modified (if modifications are\npossible)."
        },
        "id": {
          "type": "string",
          "description": "*\nID of the message guaranteed to be unique within a topic.\nSet only by the server and cannot be modified."
        },
        "userId": {
          "type": "string",
          "description": "*\nUser sending this message."
        },
        "topicId": {
          "type": "string",
          "description": "*\nTopic the message is part of.  This is only set by the server\nand cannot be modified."
        },
        "contentType": {
          "type": "string",
          "title": "*\nContent type of the message. Can be like a ContentType http\nheader or something custom like shell/command"
        },
        "contentText": {
          "type": "string",
          "description": "*\nA simple way to just send text."
        },
        "contentData": {
          "type": "object",
          "title": "Raw contents for data stored locally as JSON\nNote we can have a combination of text, url and data\nto show different things in the View/UI"
        }
      },
      "title": "*\nAn individual message in a topic"
    },
    "v1Topic": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "ID of the topic"
        },
        "creatorId": {
          "type": "string",
          "title": "ID of the user that created this topic"
        },
        "name": {
          "type": "string",
          "title": "A unique name of the topic that users can use to connect to"
        },
        "users": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "IDs of users in this topic.   Right now no information about\ntheir participation is kept."
        }
      },
      "title": "Artists perform/play/sing songs"
    },
    "v1UpdateMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/v1Message",
          "title": "The updated message"
        }
      }
    },
    "v1UpdateTopicResponse": {
      "type": "object",
      "properties": {
        "topic": {
          "$ref": "#/definitions/v1Topic",
          "title": "*\nTopic being updated"
        }
      },
      "description": "*\nThe request for (partially) updating an Topic.",
      "title": "UpdateTopicResponse"
    },
    "v1UpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "title": "*\nUser being updated"
        }
      },
      "description": "*\nThe request for (partially) updating an User.",
      "title": "UpdateUserResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "title": "ID of this user"
        },
        "name": {
          "type": "string",
          "title": "Name of this user"
        },
        "avatar": {
          "type": "string",
          "title": "An avatar object for the user"
        },
        "profileData": {
          "type": "object",
          "title": "General Profile Data"
        }
      }
    }
  }
}
