syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/onehub/protos";
package onehub.v1;

message User {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // ID of this user
  string id = 3;

  // Name of this user
  string name = 4;

  // An avatar object for the user
  string avatar = 5;

  // General Profile Data
  optional google.protobuf.Struct profile_data = 6;
}

message MessageBase {
  google.protobuf.Timestamp created_at = 1;
  google.protobuf.Timestamp updated_at = 2;

  // ID of the topic
  string id = 3;

  // ID of the user that created this topic
  string creator_id = 4;
}

// Artists perform/play/sing songs
message Topic {
  MessageBase base = 1;
  
  // A unique name of the topic that users can use to connect to
  string name = 2;

  // IDs of users in this topic.   Right now no information about
  // their participation is kept.
  map<string, bool> users = 3;
}

/**
 * Base message type of entities that have custom "content" in them.
 */
message ContentBase {
  /**
   * Content type of the message. Can be like a ContentType http
   * header or something custom like shell/command
   */
  string content_type = 1;

  /**
   * A simple way to just send text.
   */
  string content_text = 2;

  // Raw contents for data stored locally as JSON
  // Note we can have a combination of text, url and data
  // to show different things in the View/UI
  google.protobuf.Struct content_data = 3;
}

/**
 * An individual message in a topic
 */
message Message {
  MessageBase base = 1;

  ContentBase content_base = 2;

  /**
   * Topic the message is part of.  This is only set by the server
   * and cannot be modified.
   */
  string topic_id = 3;

  /**
   * ID of the parent message for threading a Topic
   */
  string parent_message_id = 4;
}

/**
 * Nodes are blocks inside a graph.
 */
message Node {
  MessageBase base = 1;

  ContentBase content_base = 2;

  // Others to follow
  string topic_id = 3;
}

/**
 * Edges between two nodes in a graph.
 */
message Edge {
  MessageBase base = 1;

  ContentBase content_base = 2;

  // ID of the source node
  string source_id = 3;

  // ID of the destination node
  string target_id = 4;

  // Whether edge id undirected (edges are directed by default)
  string undirected = 5;
}

/**
 * General way to handle pagination in all listing resources.
 */
message Pagination {
  /**
   * Instead of an offset an abstract  "page" key is provided that offers
   * an opaque "pointer" into some offset in a result set.
   */
  string page_key = 1;

  /**
   * Number of results to return.
   */
  int32 page_size = 2;
}

/**
 * Standard way to pass pagination related responses, eg the next page key
 * that can be passed on a paginated request to get the "next page" of results.
 */
message PaginationResponse {
  /**
   * The key/pointer string that subsequent List requests should pass to
   * continue the pagination.
   */
  string next_page_key = 1;

  /**
   * Whether more results exist.
   */
  bool has_more_results = 2;

  /**
   * Total number of results in teh collection if pagination did not exist.
   * 0 or -1 if unknown
   */
  int32 total_num_results = 3;
}
